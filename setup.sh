#!/bin/bash

# MOITM Server Setup Script
# Automated setup for Advanced Cross-Play Modded Minecraft Server

set -e

# Color codes for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Configuration
DEFAULT_JAVA_VERSION="21"
DEFAULT_FABRIC_VERSION="0.15.11"
DEFAULT_MC_VERSION="1.21"
DEFAULT_ENVIRONMENT="development"

# Function to print colored output
print_status() {
    echo -e "${BLUE}[INFO]${NC} $1"
}

print_success() {
    echo -e "${GREEN}[SUCCESS]${NC} $1"
}

print_warning() {
    echo -e "${YELLOW}[WARNING]${NC} $1"
}

print_error() {
    echo -e "${RED}[ERROR]${NC} $1"
}

# Function to check if command exists
command_exists() {
    command -v "$1" >/dev/null 2>&1
}

# Function to check Java version
check_java() {
    if command_exists java; then
        JAVA_VERSION=$(java -version 2>&1 | awk -F '"' '/version/ {print $2}' | sed 's/\..*//')
        if [ "$JAVA_VERSION" -ge 17 ]; then
            print_success "Java $JAVA_VERSION found"
            return 0
        else
            print_warning "Java $JAVA_VERSION found, but Java 17+ is required"
            return 1
        fi
    else
        print_error "Java not found"
        return 1
    fi
}

# Function to install Java if needed
install_java() {
    print_status "Installing Java $DEFAULT_JAVA_VERSION..."
    
    if command_exists apt-get; then
        sudo apt-get update
        sudo apt-get install -y openjdk-$DEFAULT_JAVA_VERSION-jdk
    elif command_exists yum; then
        sudo yum install -y java-$DEFAULT_JAVA_VERSION-openjdk-devel
    elif command_exists brew; then
        brew install openjdk@$DEFAULT_JAVA_VERSION
    else
        print_error "Unable to install Java automatically. Please install Java $DEFAULT_JAVA_VERSION manually."
        exit 1
    fi
}

# Function to download Fabric server
download_fabric_server() {
    print_status "Downloading Fabric server..."
    
    mkdir -p server
    cd server
    
    # Download Fabric installer
    FABRIC_INSTALLER_URL="https://maven.fabricmc.net/net/fabricmc/fabric-installer/0.11.2/fabric-installer-0.11.2.jar"
    if [ ! -f "fabric-installer.jar" ]; then
        wget -O fabric-installer.jar "$FABRIC_INSTALLER_URL" || curl -o fabric-installer.jar "$FABRIC_INSTALLER_URL"
    fi
    
    # Install Fabric server
    java -jar fabric-installer.jar server -mcversion $DEFAULT_MC_VERSION -loader $DEFAULT_FABRIC_VERSION -downloadMinecraft
    
    cd ..
    print_success "Fabric server downloaded"
}

# Function to download required mods
download_mods() {
    print_status "Downloading required mods..."
    
    mkdir -p mods/required
    cd mods/required
    
    # Essential mods for cross-play
    MODS=(
        "https://cdn.modrinth.com/data/wKQUt4GM/versions/MTm7Cw9v/ViaFabric-0.4.13%2B32-main.jar"
        "https://cdn.modrinth.com/data/JiifUB5e/versions/wWdPHQoQ/Geyser-Fabric-2.2.3-SNAPSHOT.jar"
        "https://cdn.modrinth.com/data/bWrNNfkb/versions/k1lAJjdS/floodgate-fabric-2.2.2-SNAPSHOT.jar"
    )
    
    for mod in "${MODS[@]}"; do
        filename=$(basename "$mod")
        if [ ! -f "$filename" ]; then
            print_status "Downloading $filename..."
            wget "$mod" || curl -O "$mod"
        fi
    done
    
    cd ../..
    print_success "Required mods downloaded"
}

# Function to create configuration files
create_configs() {
    print_status "Creating configuration files..."
    
    # Server properties
    cat > config/$DEFAULT_ENVIRONMENT/server/server.properties << EOF
# Minecraft server properties
# Generated by MOITM setup script

# Server settings
motd=MOITM - Advanced Cross-Play Modded Server
server-port=25565
query.port=25565
rcon.port=25575

# World settings
level-name=world
level-type=default
difficulty=normal
gamemode=survival
hardcore=false
max-players=100
spawn-protection=16
allow-nether=true
allow-flight=true

# Network settings
online-mode=false
enable-query=true
enable-rcon=false
enable-status=true
enable-command-block=true

# Performance
view-distance=10
simulation-distance=10
max-tick-time=60000
max-world-size=29999984

# Whitelist and ops
white-list=false
enforce-whitelist=false
spawn-monsters=true
spawn-animals=true
spawn-npcs=true

# Other
pvp=true
generate-structures=true
use-native-transport=true
EOF

    print_success "Configuration files created"
}

# Function to create startup scripts
create_startup_scripts() {
    print_status "Creating startup scripts..."
    
    # Linux/Mac startup script
    cat > start.sh << 'EOF'
#!/bin/bash

# MOITM Server Startup Script

# Configuration
ENVIRONMENT=${ENVIRONMENT:-development}
JAVA_OPTS=${JAVA_OPTS:-"-Xmx6G -Xms2G -XX:+UseG1GC -XX:+ParallelRefProcEnabled -XX:MaxGCPauseMillis=200 -XX:+UnlockExperimentalVMOptions -XX:+DisableExplicitGC -XX:+AlwaysPreTouch -XX:G1NewSizePercent=30 -XX:G1MaxNewSizePercent=40 -XX:G1HeapRegionSize=8M -XX:G1ReservePercent=20 -XX:G1HeapWastePercent=5 -XX:G1MixedGCCountTarget=4 -XX:InitiatingHeapOccupancyPercent=15 -XX:G1MixedGCLiveThresholdPercent=90 -XX:G1RSetUpdatingPauseTimePercent=5 -XX:SurvivorRatio=32 -XX:+PerfDisableSharedMem -XX:MaxTenuringThreshold=1"}

echo "Starting MOITM Server..."
echo "Environment: $ENVIRONMENT"

# Create necessary directories
mkdir -p logs world mods server

# Copy mods to server directory
cp -r mods/required/* server/mods/ 2>/dev/null || true
cp -r mods/optional/* server/mods/ 2>/dev/null || true

# Copy configuration files
cp config/$ENVIRONMENT/server/server.properties server/
cp -r config/$ENVIRONMENT/geyser server/config/ 2>/dev/null || true
cp -r config/$ENVIRONMENT/floodgate server/config/ 2>/dev/null || true
cp -r config/$ENVIRONMENT/viafabric server/config/ 2>/dev/null || true

# Start server
cd server
java $JAVA_OPTS -jar fabric-server-mc.$DEFAULT_MC_VERSION-loader.$DEFAULT_FABRIC_VERSION-launcher.0.11.2.jar nogui
EOF

    # Windows startup script
    cat > start.bat << EOF
@echo off
title MOITM Server

REM Configuration
set ENVIRONMENT=development
set JAVA_OPTS=-Xmx6G -Xms2G -XX:+UseG1GC

echo Starting MOITM Server...
echo Environment: %ENVIRONMENT%

REM Create necessary directories
if not exist logs mkdir logs
if not exist world mkdir world
if not exist mods mkdir mods
if not exist server mkdir server

REM Copy mods to server directory
xcopy /Y /Q mods\required\* server\mods\ 2>nul
xcopy /Y /Q mods\optional\* server\mods\ 2>nul

REM Copy configuration files
copy /Y config\%ENVIRONMENT%\server\server.properties server\ 2>nul
xcopy /Y /S config\%ENVIRONMENT%\geyser server\config\ 2>nul
xcopy /Y /S config\%ENVIRONMENT%\floodgate server\config\ 2>nul
xcopy /Y /S config\%ENVIRONMENT%\viafabric server\config\ 2>nul

REM Start server
cd server
java %JAVA_OPTS% -jar fabric-server-mc.$DEFAULT_MC_VERSION-loader.$DEFAULT_FABRIC_VERSION-launcher.0.11.2.jar nogui
pause
EOF

    chmod +x start.sh
    print_success "Startup scripts created"
}

# Function to create systemd service
create_systemd_service() {
    print_status "Creating systemd service..."
    
    cat > minecraft-server.service << EOF
[Unit]
Description=MOITM Advanced Cross-Play Minecraft Server
After=network.target

[Service]
Type=forking
User=minecraft
Group=minecraft
WorkingDirectory=$(pwd)
ExecStart=$(pwd)/start.sh
ExecStop=/bin/kill -SIGINT \$MAINPID
Restart=on-failure
RestartSec=10

# Environment
Environment=ENVIRONMENT=production
Environment=JAVA_OPTS=-Xmx6G -Xms2G -XX:+UseG1GC

[Install]
WantedBy=multi-user.target
EOF

    print_success "Systemd service file created (minecraft-server.service)"
    print_status "To install: sudo cp minecraft-server.service /etc/systemd/system/"
    print_status "To enable: sudo systemctl enable minecraft-server"
    print_status "To start: sudo systemctl start minecraft-server"
}

# Function to create Docker setup
create_docker_setup() {
    print_status "Creating Docker configuration..."
    
    cat > Dockerfile << EOF
FROM eclipse-temurin:21-jdk-jammy

# Install dependencies
RUN apt-get update && apt-get install -y \\
    wget \\
    curl \\
    unzip \\
    && rm -rf /var/lib/apt/lists/*

# Create minecraft user
RUN useradd -m -s /bin/bash minecraft

# Set working directory
WORKDIR /opt/minecraft

# Copy server files
COPY . .
RUN chown -R minecraft:minecraft /opt/minecraft

# Switch to minecraft user
USER minecraft

# Expose ports
EXPOSE 25565 19132 8080

# Health check
HEALTHCHECK --interval=30s --timeout=10s --start-period=60s --retries=3 \\
    CMD netstat -an | grep :25565 || exit 1

# Start command
CMD ["./start.sh"]
EOF

    cat > docker-compose.yml << EOF
version: '3.8'

services:
  minecraft-server:
    build: .
    container_name: moitm-server
    restart: unless-stopped
    ports:
      - "25565:25565"  # Java Edition
      - "19132:19132/udp"  # Bedrock Edition
      - "8080:8080"    # Web Client
    volumes:
      - ./world:/opt/minecraft/world
      - ./logs:/opt/minecraft/logs
      - ./config:/opt/minecraft/config
    environment:
      - ENVIRONMENT=production
      - JAVA_OPTS=-Xmx6G -Xms2G -XX:+UseG1GC
    mem_limit: 8g
    mem_reservation: 2g
    networks:
      - minecraft

  web-client:
    image: nginx:alpine
    container_name: moitm-web
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./web-client:/usr/share/nginx/html
      - ./config/nginx.conf:/etc/nginx/nginx.conf:ro
    depends_on:
      - minecraft-server
    networks:
      - minecraft

networks:
  minecraft:
    driver: bridge
EOF

    print_success "Docker configuration created"
}

# Main setup function
main() {
    print_status "MOITM Advanced Cross-Play Minecraft Server Setup"
    print_status "============================================="
    
    # Check and install Java
    if ! check_java; then
        read -p "Install Java automatically? (y/n): " -n 1 -r
        echo
        if [[ $REPLY =~ ^[Yy]$ ]]; then
            install_java
        else
            print_error "Java 17+ is required. Please install manually and run setup again."
            exit 1
        fi
    fi
    
    # Download server and mods
    download_fabric_server
    download_mods
    
    # Create configurations
    create_configs
    create_startup_scripts
    create_systemd_service
    create_docker_setup
    
    print_success "Setup completed successfully!"
    print_status "============================================="
    print_status "Next steps:"
    print_status "1. Review configuration in config/$DEFAULT_ENVIRONMENT/"
    print_status "2. Add optional mods to mods/optional/"
    print_status "3. Start server with: ./start.sh"
    print_status "4. For Docker: docker-compose up -d"
    print_status "============================================="
}

# Run main function
main "$@"